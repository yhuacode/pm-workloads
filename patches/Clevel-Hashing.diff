diff --git a/CMakeLists.txt b/CMakeLists.txt
index 24d6864..84af149 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -55,6 +55,38 @@ set(CXX_STANDARD_REQUIRED ON)
 set(CXX_STANDARD 11 CACHE STRING "C++ language standard")
 set(CMAKE_CXX_STANDARD ${CXX_STANDARD})
 
+option(ENABLE_PMRACE "Build with PMRace" ON)
+
+if(ENABLE_PMRACE)
+	set(LLVM_DIR $ENV{LLVM_DIR})
+
+	set(CMAKE_C_COMPILER "clang")
+	set(CMAKE_CXX_COMPILER "clang++")
+
+	set(PMRACE_DIR $ENV{PMRACE_DIR})
+
+	if (NOT PMRACE_DIR)
+		message(FATAL_ERROR "The environmantal variable 'PMRACE_DIR' is required!")
+	else()
+		message(STATUS "PMRACE_DIR is set to ${PMRACE_DIR}")
+	endif()
+
+	add_compile_options("-fsanitize=dataflow")
+	link_libraries("-fsanitize=dataflow")
+
+	add_compile_options("-stdlib=libc++")
+	link_libraries("-stdlib=libc++")
+
+	# Set path for pmrace
+	link_directories(${PMRACE_DIR}/instrument)
+	link_directories(${LLVM_DIR}/lib)
+
+	# Set path for pmdk
+	include_directories(include ${LLVM_DIR}/include/c++/v1)
+	include_directories(include ${PMRACE_DIR}/deps/pmdk/install/include)
+	link_directories(${PMRACE_DIR}/deps/pmdk/install/lib/pmdk_debug)
+endif()
+
 include(FindPerl)
 include(FindThreads)
 include(CMakeDependentOption)
@@ -64,9 +96,9 @@ include(CheckCXXCompilerFlag)
 include(GNUInstallDirs)
 include(${CMAKE_SOURCE_DIR}/cmake/functions.cmake)
 
-option(BUILD_EXAMPLES "build examples" ON)
+option(BUILD_EXAMPLES "build examples" OFF)
 option(BUILD_TESTS "build tests" ON)
-option(BUILD_DOC "build documentation" ON)
+option(BUILD_DOC "build documentation" OFF)
 option(COVERAGE "run coverage test" OFF)
 option(DEVELOPER_MODE "enable developer checks" OFF)
 option(TRACE_TESTS "more verbose test outputs" OFF)
@@ -74,9 +106,9 @@ option(USE_ASAN "enable AddressSanitizer (debugging)" OFF)
 option(USE_UBSAN "enable UndefinedBehaviorSanitizer (debugging)" OFF)
 option(TESTS_USE_FORCED_PMEM "run tests with PMEM_IS_PMEM_FORCE=1" OFF)
 option(TESTS_USE_VALGRIND "enable tests with valgrind (if found)" ON)
-option(ENABLE_ARRAY "enable installation and testing of pmem::obj::experimental::array" ON)
-option(ENABLE_VECTOR "enable installation and testing of pmem::obj::experimental::vector" ON)
-option(ENABLE_STRING "enable installation and testing of pmem::obj::experimental::string (depends on ENABLE_VECTOR)" ON)
+option(ENABLE_ARRAY "enable installation and testing of pmem::obj::experimental::array" OFF)
+option(ENABLE_VECTOR "enable installation and testing of pmem::obj::experimental::vector" OFF)
+option(ENABLE_STRING "enable installation and testing of pmem::obj::experimental::string (depends on ENABLE_VECTOR)" OFF)
 option(ENABLE_CONCURRENT_HASHMAP "enable installation and testing of pmem::obj::experimental::concurrent_hash_map (depends on ENABLE_STRING)" ON)
 
 if (USE_SIMD)
diff --git a/cmake/FindLIBPMEMOBJ.cmake b/cmake/FindLIBPMEMOBJ.cmake
index becdfea..800e09c 100644
--- a/cmake/FindLIBPMEMOBJ.cmake
+++ b/cmake/FindLIBPMEMOBJ.cmake
@@ -29,9 +29,19 @@
 # (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 # OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 
-find_path(LIBPMEMOBJ_INCLUDE_DIR libpmemobj.h)
-find_library(LIBPMEMOBJ_LIBRARY NAMES pmemobj libpmemobj)
-find_library(LIBPMEM_LIBRARY NAMES pmem libpmem)
+if(ENABLE_PMRACE)
+    find_path(LIBPMEMOBJ_INCLUDE_DIR libpmemobj.h ${PMRACE_DIR}/deps/pmdk/install/include)
+    find_library(LIBPMEMOBJ_LIBRARY NAMES pmemobj libpmemobj HINTS ${PMRACE_DIR}/deps/pmdk/install/lib/pmdk_debug)
+    find_library(LIBPMEM_LIBRARY NAMES pmem libpmem HINTS ${PMRACE_DIR}/deps/pmdk/install/lib/pmdk_debug)
+else()
+    find_path(LIBPMEMOBJ_INCLUDE_DIR libpmemobj.h)
+    find_library(LIBPMEMOBJ_LIBRARY NAMES pmemobj libpmemobj)
+    find_library(LIBPMEM_LIBRARY NAMES pmem libpmem)
+endif()
+
+message(STATUS "libpmemobj.h => ${LIBPMEMOBJ_INCLUDE_DIR}")
+message(STATUS "LIBPMEMOBJ_LIBRARY => ${LIBPMEMOBJ_LIBRARY}")
+message(STATUS "LIBPMEM_LIBRARY => ${LIBPMEM_LIBRARY}")
 
 set(LIBPMEMOBJ_LIBRARIES ${LIBPMEMOBJ_LIBRARY} ${LIBPMEM_LIBRARY})
 set(LIBPMEMOBJ_INCLUDE_DIRS ${LIBPMEMOBJ_INCLUDE_DIR})
diff --git a/include/libpmemobj++/experimental/clevel_hash.hpp b/include/libpmemobj++/experimental/clevel_hash.hpp
index cf33fc6..c0cdb40 100644
--- a/include/libpmemobj++/experimental/clevel_hash.hpp
+++ b/include/libpmemobj++/experimental/clevel_hash.hpp
@@ -294,14 +294,14 @@ public:
 		level_meta *m = static_cast<level_meta *>(meta(my_pool_uuid));
 
 		persistent_ptr<level_bucket> tmp = make_persistent<level_bucket>();
-		tmp->buckets = make_persistent<bucket[]>(pow(2, hashpower));
-		tmp->capacity = pow(2, hashpower);
+		tmp->buckets = make_persistent<bucket[]>(1 << hashpower);
+		tmp->capacity = 1 << hashpower;
 		tmp->up = nullptr;
 		m->first_level.off = tmp.raw().off;
 
 		tmp = make_persistent<level_bucket>();
-		tmp->buckets = make_persistent<bucket[]>(pow(2, hashpower - 1));
-		tmp->capacity = pow(2, hashpower - 1);
+		tmp->buckets = make_persistent<bucket[]>(1 << (hashpower - 1));
+		tmp->capacity = 1 << (hashpower - 1);
 		tmp->up = m->first_level;
 		m->last_level.off = tmp.raw().off;
 
diff --git a/tests/CMakeLists.txt b/tests/CMakeLists.txt
index 4f3aa18..6f80c79 100644
--- a/tests/CMakeLists.txt
+++ b/tests/CMakeLists.txt
@@ -67,6 +67,19 @@ endif()
 
 find_packages()
 
+if(ENABLE_PMRACE)
+	set(HOOK_FLAGS "-Xclang -load -Xclang ${PMRACE_DIR}/instrument/libPMRacePass.so -mllvm -coverage-path -mllvm output/cov -mllvm -race-path -mllvm output/race.csv -mllvm -unflushed-path -mllvm output/unflushed.csv -mllvm -meta-path -mllvm ../$@.json -mllvm -pmrace-mode -mllvm pmdk -mllvm -dfsan-abilist=${PMRACE_DIR}/instrument/pmrace-ABI.txt -fheinous-gnu-extensions -g -O0 -DPMRACE_ENABLED")
+
+	if(LIBUNWIND_FOUND)
+		message(STATUS "LIBUNWIND_LIBRARIES => ${LIBUNWIND_LIBRARIES}")
+		set(HOOK_FLAGS "${HOOK_FLAGS} -mllvm -dfsan-abilist=${CMAKE_SOURCE_DIR}/../abilists/libuwind_abilist.txt")
+	endif()
+
+	set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${COMMON_FLAGS} ${HOOK_FLAGS}")
+
+	set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${COMMON_FLAGS} ${HOOK_FLAGS}")
+endif(ENABLE_PMRACE)
+
 add_library(test_backtrace STATIC test_backtrace.c)
 if(LIBUNWIND_FOUND)
 	target_compile_definitions(test_backtrace PUBLIC USE_LIBUNWIND=1)
@@ -90,16 +103,16 @@ function(build_example_pman)
 	endif()
 endfunction()
 
-if(NO_GCC_VARIADIC_TEMPLATE_BUG)
-	build_example_queue()
-	add_test_generic(NAME ex-queue CASE 0 TRACERS none)
+# if(NO_GCC_VARIADIC_TEMPLATE_BUG)
+# 	build_example_queue()
+# 	add_test_generic(NAME ex-queue CASE 0 TRACERS none)
 
-	build_example_pman()
-	add_test_generic(NAME ex-pman CASE 0 TRACERS none)
-else()
-	message(WARNING "Skipping examples tests because of gcc variadic template bug")
-	skip_test("examples_tests" "SKIPPED_BECAUSE_OF_GCC_VARIADIC_TEMPLATE_BUG")
-endif()
+# 	build_example_pman()
+# 	add_test_generic(NAME ex-pman CASE 0 TRACERS none)
+# else()
+# 	message(WARNING "Skipping examples tests because of gcc variadic template bug")
+# 	skip_test("examples_tests" "SKIPPED_BECAUSE_OF_GCC_VARIADIC_TEMPLATE_BUG")
+# endif()
 
 if(AGGREGATE_INITIALIZATION_AVAILABLE)
 	build_test(aggregate_initialization aggregate_initialization/aggregate_initialization.cpp)
@@ -329,29 +342,29 @@ if (ENABLE_STRING)
 endif()
 
 if(PMEMVLT_PRESENT AND ENABLE_CONCURRENT_HASHMAP)
-	build_test(clht_cli clht/clht_cli.cpp)
-	add_test_generic(NAME clht_cli TRACERS none memcheck pmemcheck drd helgrind)
+	# build_test(clht_cli clht/clht_cli.cpp)
+	# add_test_generic(NAME clht_cli TRACERS none memcheck pmemcheck drd helgrind)
 
-	build_test(clht_resize clht/clht_resize.cpp)
-	add_test_generic(NAME clht_resize TRACERS none memcheck pmemcheck drd helgrind)
+	# build_test(clht_resize clht/clht_resize.cpp)
+	# add_test_generic(NAME clht_resize TRACERS none memcheck pmemcheck drd helgrind)
 
-	build_test(clht_ycsb clht/clht_ycsb.cpp)
-	add_test_generic(NAME clht_ycsb TRACERS none memcheck pmemcheck drd helgrind)
+	# build_test(clht_ycsb clht/clht_ycsb.cpp)
+	# add_test_generic(NAME clht_ycsb TRACERS none memcheck pmemcheck drd helgrind)
 
-	build_test(clht_ycsb_macro clht/clht_ycsb_macro.cpp)
-	add_test_generic(NAME clht_ycsb_macro TRACERS none memcheck pmemcheck drd helgrind)
+	# build_test(clht_ycsb_macro clht/clht_ycsb_macro.cpp)
+	# add_test_generic(NAME clht_ycsb_macro TRACERS none memcheck pmemcheck drd helgrind)
 
-	build_test(level_hash_cli level_hash/level_hash_cli.cpp)
-	add_test_generic(NAME level_hash_cli TRACERS none memcheck pmemcheck drd helgrind)
+	# build_test(level_hash_cli level_hash/level_hash_cli.cpp)
+	# add_test_generic(NAME level_hash_cli TRACERS none memcheck pmemcheck drd helgrind)
 
-	build_test(level_hash_resize level_hash/level_hash_resize.cpp)
-	add_test_generic(NAME level_hash_resize TRACERS none memcheck pmemcheck drd helgrind)
+	# build_test(level_hash_resize level_hash/level_hash_resize.cpp)
+	# add_test_generic(NAME level_hash_resize TRACERS none memcheck pmemcheck drd helgrind)
 
-	build_test(level_hash_ycsb level_hash/level_hash_ycsb.cpp)
-	add_test_generic(NAME level_hash_ycsb TRACERS none memcheck pmemcheck drd helgrind)
+	# build_test(level_hash_ycsb level_hash/level_hash_ycsb.cpp)
+	# add_test_generic(NAME level_hash_ycsb TRACERS none memcheck pmemcheck drd helgrind)
 
-	build_test(level_hash_ycsb_macro level_hash/level_hash_ycsb_macro.cpp)
-	add_test_generic(NAME level_hash_ycsb_macro TRACERS none memcheck pmemcheck drd helgrind)
+	# build_test(level_hash_ycsb_macro level_hash/level_hash_ycsb_macro.cpp)
+	# add_test_generic(NAME level_hash_ycsb_macro TRACERS none memcheck pmemcheck drd helgrind)
 
 	build_test(clevel_hash_cli clevel_hash/clevel_hash_cli.cpp)
 	add_test_generic(NAME clevel_hash_cli TRACERS none memcheck pmemcheck drd helgrind)
@@ -365,17 +378,17 @@ if(PMEMVLT_PRESENT AND ENABLE_CONCURRENT_HASHMAP)
 	build_test(clevel_hash_ycsb_macro clevel_hash/clevel_hash_ycsb_macro.cpp)
 	add_test_generic(NAME clevel_hash_ycsb_macro TRACERS none memcheck pmemcheck drd helgrind)
 
-	build_test(cceh_cli cceh/cceh_cli.cpp)
-	add_test_generic(NAME cceh_cli TRACERS none memcheck pmemcheck drd helgrind)
+	# build_test(cceh_cli cceh/cceh_cli.cpp)
+	# add_test_generic(NAME cceh_cli TRACERS none memcheck pmemcheck drd helgrind)
 
-	build_test(cceh_resize cceh/cceh_resize.cpp)
-	add_test_generic(NAME cceh_resize TRACERS none memcheck pmemcheck drd helgrind)
+	# build_test(cceh_resize cceh/cceh_resize.cpp)
+	# add_test_generic(NAME cceh_resize TRACERS none memcheck pmemcheck drd helgrind)
 
-	build_test(cceh_ycsb cceh/cceh_ycsb.cpp)
-	add_test_generic(NAME cceh_ycsb TRACERS none memcheck pmemcheck drd helgrind)
+	# build_test(cceh_ycsb cceh/cceh_ycsb.cpp)
+	# add_test_generic(NAME cceh_ycsb TRACERS none memcheck pmemcheck drd helgrind)
 
-	build_test(cceh_ycsb_macro cceh/cceh_ycsb_macro.cpp)
-	add_test_generic(NAME cceh_ycsb_macro TRACERS none memcheck pmemcheck drd helgrind)
+	# build_test(cceh_ycsb_macro cceh/cceh_ycsb_macro.cpp)
+	# add_test_generic(NAME cceh_ycsb_macro TRACERS none memcheck pmemcheck drd helgrind)
 
 	build_test(concurrent_hash_map_cli concurrent_hash_map/concurrent_hash_map_cli.cpp)
 	add_test_generic(NAME concurrent_hash_map_cli TRACERS none memcheck pmemcheck drd helgrind)
diff --git a/tests/clevel_hash/clevel_hash_ycsb.cpp b/tests/clevel_hash/clevel_hash_ycsb.cpp
index cf42671..d47f24f 100644
--- a/tests/clevel_hash/clevel_hash_ycsb.cpp
+++ b/tests/clevel_hash/clevel_hash_ycsb.cpp
@@ -3,13 +3,14 @@
 #include <libpmemobj++/persistent_ptr.hpp>
 #include <libpmemobj++/pool.hpp>
 
+#include <atomic>
+#include <cassert>
+#include <cstdio>
 #include <iterator>
-#include <thread>
-#include <vector>
 #include <sstream>
-#include <cstdio>
-#include <cassert>
+#include <thread>
 #include <time.h>
+#include <vector>
 
 #include "../../examples/libpmemobj_cpp_examples_common.hpp"
 #include "../polymorphic_string.h"
@@ -43,7 +44,8 @@ namespace
 class key_equal {
 public:
 	template <typename M, typename U>
-	bool operator()(const M &lhs, const U &rhs) const
+	bool
+	operator()(const M &lhs, const U &rhs) const
 	{
 		return lhs == rhs;
 	}
@@ -56,14 +58,15 @@ class string_hasher {
 public:
 	using transparent_key_equal = key_equal;
 
-	size_t operator()(const polymorphic_string &str) const
+	size_t
+	operator()(const polymorphic_string &str) const
 	{
 		return hash(str.c_str(), str.size());
 	}
 
-
 private:
-	size_t hash(const char *str, size_t size) const
+	size_t
+	hash(const char *str, size_t size) const
 	{
 		size_t h = 0;
 		for (size_t i = 0; i < size; ++i) {
@@ -75,7 +78,7 @@ private:
 
 using string_t = polymorphic_string;
 typedef nvobj::experimental::clevel_hash<string_t, string_t, string_hasher,
-	std::equal_to<string_t>, HASH_POWER>
+					 std::equal_to<string_t>, HASH_POWER>
 	persistent_map_type;
 
 struct root {
@@ -114,25 +117,25 @@ struct sub_thread {
 
 } /* Annoymous namespace */
 
+#ifndef __AFL_FUZZ_TESTCASE_LEN
+ssize_t fuzz_len;
+#define __AFL_FUZZ_TESTCASE_LEN fuzz_len
+unsigned char fuzz_buf[1024000];
+#define __AFL_FUZZ_TESTCASE_BUF fuzz_buf
+#define __AFL_FUZZ_INIT() void sync()
+#define __AFL_INIT()                                                           \
+	((fuzz_len = read(0, fuzz_buf, sizeof(fuzz_buf))) > 0 ? 1 : 0)
+#endif
+
+__AFL_FUZZ_INIT();
+
 int
 main(int argc, char *argv[])
 {
-	char *ptr = getenv("PMEM_WRITE_LATENCY_IN_NS");
-	if (ptr)
-		printf("PMEM_WRITE_LATENCY_IN_NS set to %s (ns)\n", ptr);
-	else
-		printf("write latency is not set\n");
-
-#ifdef LATENCY_ENABLE
-	printf("LATENCY_ENABLE set\n");
-#endif
-
 	// parse inputs
-	if (argc != 5) {
-		printf("usage: %s <pool_path> <load_file> <run_file> <thread_num>\n\n", argv[0]);
+	if (argc != 3) {
+		printf("usage: %s <pool_path> <thread_num>\n\n", argv[0]);
 		printf("    pool_path: the pool file required for PMDK\n");
-		printf("    load_file: a workload file for the load phase\n");
-		printf("    run_file: a workload file for the run phase\n");
 		printf("    thread_num: the number of threads (>=2)\n");
 		exit(1);
 	}
@@ -140,20 +143,45 @@ main(int argc, char *argv[])
 	printf("MACRO HASH_POWER: %d\n", HASH_POWER);
 
 	const char *path = argv[1];
-	size_t thread_num;
+	size_t numThreads;
 
 	std::stringstream s;
-	s << argv[4];
-	s >> thread_num;
+	s << argv[2];
+	s >> numThreads;
 
-	assert(thread_num > 1);
+	assert(numThreads > 1);
 
 	// initialize clevel hash
 	nvobj::pool<root> pop;
 	remove(path); // delete the mapped file.
 
-	pop = nvobj::pool<root>::create(
-		path, LAYOUT, PMEMOBJ_MIN_POOL * 20480, S_IWUSR | S_IRUSR);
+	size_t POOL_SIZE = PMEMOBJ_MIN_POOL * 16;
+
+	pop = nvobj::pool<root>::create(path, LAYOUT, POOL_SIZE,
+					S_IWUSR | S_IRUSR);
+
+#ifndef PMRACE_ENABLED
+	void *bak = malloc(POOL_SIZE);
+	memcpy(bak, pop.handle(), POOL_SIZE);
+#endif
+
+	__AFL_INIT();
+
+	unsigned char *afl_testcase_buf = __AFL_FUZZ_TESTCASE_BUF;
+	int afl_testcase_len = __AFL_FUZZ_TESTCASE_LEN;
+	std::vector<std::thread> thread_groups;
+	std::vector<std::istringstream> cmd_streams;
+	std::atomic<size_t> next_thread_id;
+	char *tok;
+	size_t i;
+
+	next_thread_id.store(0);
+
+#ifndef PMRACE_ENABLED
+	memcpy(pop.handle(), bak, POOL_SIZE);
+	free(bak);
+#endif
+
 	auto proot = pop.root();
 
 	{
@@ -169,259 +197,62 @@ main(int argc, char *argv[])
 	printf("initialization done.\n");
 	printf("initial capacity %ld\n", map->capacity());
 
+	for (i = 0; i < numThreads; ++i) {
+		if (i == 0) {
+			tok = strtok((char *)afl_testcase_buf, "\t");
+		} else {
+			tok = strtok(NULL, "\t");
+		}
 
-	// load benchmark files
-	FILE *ycsb, *ycsb_read;
-	char buf[1024];
-	char *pbuf = buf;
-	size_t len = 1024;
-	size_t loaded = 0, inserted = 0, ins_failure = 0, found = 0, unfound = 0;
-	size_t deleted = 0, del_existing = 0, updated = 0, upd_existing = 0;
-
-	if ((ycsb = fopen(argv[2], "r")) == nullptr)
-	{
-		printf("failed to read %s\n", argv[2]);
-		exit(1);
+		if (tok == NULL) {
+			cmd_streams.emplace_back(std::string());
+		} else {
+			cmd_streams.emplace_back(tok);
+		}
 	}
 
-	printf("Load phase begins \n");
-
-	while (getline(&pbuf, &len, ycsb) != -1) {
-		if (strncmp(buf, "INSERT", 6) == 0) {
-			string_t key(buf + 7, KEY_LEN);
-			auto ret = map->insert(persistent_map_type::value_type(key, key), 1, loaded);
-			if (!ret.found) {
-				loaded++;
+	auto func = [&]() {
+		size_t thread_id = next_thread_id.fetch_add(1);
+		char op;
+		std::string k, v;
+		auto &cmd_stream = cmd_streams[thread_id];
+
+		while (cmd_stream >> op) {
+			if (op == 'i') {
+				cmd_stream >> std::hex >> k >> v;
+				map->insert(
+					persistent_map_type::value_type(k, v),
+					thread_id, 0);
+			} else if (op == 's') {
+				cmd_stream >> std::hex >> k;
+				map->search(persistent_map_type::key_type(k));
+			} else if (op == 'u') {
+				cmd_stream >> std::hex >> k >> v;
+				map->update(
+					persistent_map_type::value_type(k, v),
+					thread_id);
+			} else if (op == 'e') {
+				cmd_stream >> std::hex >> k;
+				map->erase(persistent_map_type::key_type(k),
+					   thread_id);
 			} else {
-				break;
+				std::cerr << "Unsupported cmd\n";
+				abort();
 			}
 		}
-	}
-	fclose(ycsb);
-	printf("Load phase finishes: %ld items are inserted \n", loaded);
-
-	{
-		nvobj::transaction::manual tx(pop);
-
-		map->set_thread_num(thread_num);
+	};
 
-		nvobj::transaction::commit();
+	for (i = 0; i < numThreads; ++i) {
+		thread_groups.push_back(std::thread{func});
 	}
 
-	// prepare data for the run phase
-	if ((ycsb_read = fopen(argv[3], "r")) == NULL) {
-		printf("fail to read %s\n", argv[3]);
-		exit(1);
+	for (i = 0; i < numThreads; ++i) {
+		thread_groups[i].join();
 	}
 
-	thread_num--; // one thread reserved for background resizing
-	thread_queue* run_queue[thread_num];
-	double* latency_queue[thread_num];
-    int move[thread_num];
-    for(size_t t = 0; t < thread_num; t ++){
-        run_queue[t] = (thread_queue *)calloc(READ_WRITE_NUM / thread_num + 1, sizeof(thread_queue));
-		latency_queue[t] = (double *)calloc(READ_WRITE_NUM / thread_num + 1, sizeof(double));
-        move[t] = 0;
-    }
-
-	size_t operation_num = 0;
-	while(getline(&pbuf,&len,ycsb_read) != -1){
-		if(strncmp(buf, "INSERT", 6) == 0){
-			run_queue[operation_num%thread_num][move[operation_num%thread_num]].key = string_t(buf+7, KEY_LEN);
-			run_queue[operation_num%thread_num][move[operation_num%thread_num]].operation = clevel_op::INSERT;
-			move[operation_num%thread_num] ++;
-		}
-		else if(strncmp(buf, "READ", 4) == 0){
-			run_queue[operation_num%thread_num][move[operation_num%thread_num]].key = string_t(buf+5, KEY_LEN);
-			run_queue[operation_num%thread_num][move[operation_num%thread_num]].operation = clevel_op::READ;
-			move[operation_num%thread_num] ++;
-		}
-		else if (strncmp(buf, "DELETE", 6) == 0){
-			run_queue[operation_num%thread_num][move[operation_num%thread_num]].key = string_t(buf+7, KEY_LEN);
-			run_queue[operation_num%thread_num][move[operation_num%thread_num]].operation = clevel_op::DELETE;
-			move[operation_num%thread_num] ++;
-		}
-		else if (strncmp(buf, "UPDATE", 6) == 0){
-			run_queue[operation_num%thread_num][move[operation_num%thread_num]].key = string_t(buf+7, KEY_LEN);
-			run_queue[operation_num%thread_num][move[operation_num%thread_num]].operation = clevel_op::UPDATE;
-			move[operation_num%thread_num] ++;
-		}
-		operation_num ++;
-	}
-	fclose(ycsb_read);
-
-	sub_thread* THREADS = (sub_thread*)malloc(sizeof(sub_thread)*thread_num);
-    inserted = 0;
-
-	printf("Run phase begins: %s \n", argv[3]);
-    for(size_t t = 0; t < thread_num; t++){
-        THREADS[t].id = t;
-        THREADS[t].inserted = 0;
-		THREADS[t].ins_failure = 0;
-        THREADS[t].found = 0;
-		THREADS[t].unfound = 0;
-		THREADS[t].deleted = 0;
-		THREADS[t].del_existing = 0;
-		THREADS[t].updated = 0;
-		THREADS[t].upd_existing = 0;
-		THREADS[t].thread_num = thread_num;
-		THREADS[t].run_queue = run_queue[t];
-		THREADS[t].latency_queue = latency_queue[t];
-    }
-
-    std::vector<std::thread> threads;
-    threads.reserve(thread_num);
-
-	struct timespec start, end;
-#ifdef LATENCY_ENABLE
-	struct timespec stop;
-#endif
-    clock_gettime(CLOCK_MONOTONIC, &start);
+	map->~clevel_hash();
 
-	for (size_t i = 0; i < thread_num; i++)
-	{
-		threads.emplace_back([&](size_t thread_id) {
-			printf("Thread %ld is opened\n", thread_id);
-			size_t offset = loaded + READ_WRITE_NUM / thread_num * thread_id;
-			for (size_t j = 0; j < READ_WRITE_NUM / thread_num; j++)
-			{
-				if (THREADS[thread_id].run_queue[j].operation == clevel_op::INSERT)
-				{
-					auto ret = map->insert(persistent_map_type::value_type(
-						THREADS[thread_id].run_queue[j].key,
-						THREADS[thread_id].run_queue[j].key),
-					thread_id + 1, offset + j);
-					if (!ret.found)
-					{
-						THREADS[thread_id].inserted++;
-					}
-					else
-					{
-						THREADS[thread_id].ins_failure++;
-					}
-				}
-				else if (THREADS[thread_id].run_queue[j].operation == clevel_op::READ)
-				{
-					auto ret = map->search(persistent_map_type::key_type(
-						THREADS[thread_id].run_queue[j].key));
-					if (ret.found)
-					{
-						THREADS[thread_id].found++;
-					}
-					else
-					{
-						THREADS[thread_id].unfound++;
-					}
-				}
-				else if (THREADS[thread_id].run_queue[j].operation == clevel_op::DELETE)
-				{
-					auto ret = map->erase(persistent_map_type::key_type(
-						THREADS[thread_id].run_queue[j].key), thread_id + 1);
-					THREADS[thread_id].deleted++;
-					if (ret.found)
-					{
-						THREADS[thread_id].del_existing++;
-					}
-				}
-				else if (THREADS[thread_id].run_queue[j].operation == clevel_op::UPDATE)
-				{
-					string_t new_val = THREADS[thread_id].run_queue[j].key;
-					new_val[0] = ~new_val[0];
-					auto ret = map->update(persistent_map_type::value_type(
-						THREADS[thread_id].run_queue[j].key, new_val),
-						thread_id + 1);
-					THREADS[thread_id].updated++;
-					if (ret.found)
-					{
-						THREADS[thread_id].upd_existing++;
-					}
-				}
-				else
-				{
-					printf("unknown clevel_op\n");
-					exit(1);
-				}
-#ifdef LATENCY_ENABLE
-				clock_gettime(CLOCK_MONOTONIC, &stop);
-				THREADS[thread_id].latency_queue[j] = stop.tv_sec * 1000000000.0 + stop.tv_nsec;
-				assert(THREADS[thread_id].latency_queue[j] > 0);
-#endif
-			}
-		}, i);
-	}
-
-	for (auto &t : threads) {
-		t.join();
-	}
-
-	clock_gettime(CLOCK_MONOTONIC, &end);
-	size_t elapsed = static_cast<size_t>((end.tv_sec - start.tv_sec) * 1000000000 +
-		(end.tv_nsec - start.tv_nsec));
-
-	for (size_t t = 0; t < thread_num; ++t) {
-		inserted += THREADS[t].inserted;
-		ins_failure += THREADS[t].ins_failure;
-		found += THREADS[t].found;
-		unfound += THREADS[t].unfound;
-		deleted += THREADS[t].deleted;
-		del_existing += THREADS[t].del_existing;
-		updated += THREADS[t].updated;
-		upd_existing += THREADS[t].upd_existing;
-	}
-
-	uint64_t total_slots = map->capacity();
-	printf("capacity (after insertion) %ld, load factor %f\n",
-		total_slots, (loaded + inserted) * 1.0 / total_slots);
-
-	printf("Insert operations: %ld loaded, %ld inserted, %ld failed\n", loaded, inserted, ins_failure);
-	printf("Read operations: %ld found, %ld not found\n", found, unfound);
-	printf("Delete operations: deleted existing %ld items via %ld delete operations in total\n", del_existing, deleted);
-	printf("Update operations: update existing %ld items via %ld update operations in total\n", upd_existing, updated);
-
-	float elapsed_sec = elapsed / 1000000000.0;
-	printf("%f seconds\n", elapsed_sec);
-	printf("%f reqs per second (%ld threads)\n", READ_WRITE_NUM / elapsed_sec, thread_num);
-
-	FILE *fp = fopen("throughput.txt", "w");
-	fprintf(fp, "%f", READ_WRITE_NUM / elapsed_sec);
-	fclose(fp);
-
-#ifdef LATENCY_ENABLE
-    double start_time = start.tv_sec * 1000000000.0 + start.tv_nsec;
-    double latency = 0;
-    double total_latency = 0;
-    FILE *fp_time = fopen("clevel_hash_processing_time.txt", "w");
-    for (size_t t = 0; t < thread_num; ++t)
-    {
-        for (size_t i = 0; i < READ_WRITE_NUM / thread_num; i++)
-        {
-            latency = THREADS[t].latency_queue[i] - start_time;
-            total_latency += latency;
-            fprintf(fp_time, "%f\n", latency);
-        }
-    }
-	printf("Average time: %f (ns)\n", total_latency * 1.0 / READ_WRITE_NUM);
-
-	total_latency = 0;
-	FILE *fp_latency = fopen("clevel_hash_latency.txt", "w");
-	for (size_t t = 0; t < thread_num; ++t)
-	{
-		latency = THREADS[t].latency_queue[0] - start_time;
-		total_latency += latency;
-		fprintf(fp_latency, "%f\n", latency);
-
-		for (size_t i = 1; i < READ_WRITE_NUM / thread_num; i++)
-        {
-            latency = THREADS[t].latency_queue[i] - THREADS[t].latency_queue[i-1];
-            total_latency += latency;
-            fprintf(fp_latency, "%f\n", latency);
-        }
-	}
-    printf("Average latency: %f (ns)\n", total_latency * 1.0 / READ_WRITE_NUM);
-	FILE *fp_reslut = fopen("latency.txt", "w");
-	fprintf(fp_reslut, "%f", total_latency * 1.0 / READ_WRITE_NUM);
-	fclose(fp_reslut);
-#endif
+	pop.close();
 
 	return 0;
 }
diff --git a/tests/ctest_helpers.cmake b/tests/ctest_helpers.cmake
index a4715bc..6f4544e 100644
--- a/tests/ctest_helpers.cmake
+++ b/tests/ctest_helpers.cmake
@@ -86,11 +86,11 @@ function(find_packages)
 		find_package(Curses QUIET)
 	endif()
 
-	if(PKG_CONFIG_FOUND)
-		pkg_check_modules(LIBUNWIND QUIET libunwind)
-	else()
-		find_package(LIBUNWIND QUIET)
-	endif()
+	# if(PKG_CONFIG_FOUND)
+	# 	pkg_check_modules(LIBUNWIND QUIET libunwind)
+	# else()
+	# 	find_package(LIBUNWIND QUIET)
+	# endif()
 	if(NOT LIBUNWIND_FOUND)
 		message(WARNING "libunwind not found. Stack traces from tests will not be reliable")
 	endif()
@@ -134,6 +134,9 @@ function(build_test name)
 	if(WIN32)
 		target_link_libraries(${name} dbghelp)
 	endif()
+	if(ENABLE_PMRACE)
+		target_link_libraries(${name} PMRaceHook)
+	endif()
 	target_compile_definitions(${name} PRIVATE TESTS_LIBPMEMOBJ_VERSION=0x${LIBPMEMOBJ_VERSION_NUM})
 
 	add_dependencies(tests ${name})
