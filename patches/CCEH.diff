diff --git a/CCEH-PMDK/Makefile b/CCEH-PMDK/Makefile
index c71f10b..18fa069 100644
--- a/CCEH-PMDK/Makefile
+++ b/CCEH-PMDK/Makefile
@@ -1,19 +1,73 @@
+# .PHONY: all clean
+
+# CXX := /home/user/ck/AFLplusplus/afl-clang-fast++ -O3 -std=c++17
+# CFLAGS := -I./ -lrt
+
+# all: test
+
+# test: src/test.cpp CCEH
+# 	$(CXX) $(CFLAGS) -o bin/cceh src/test.cpp src/CCEH.o -lpmemobj -lpmem -lpthread -DMULTITHREAD
+# 	$(CXX) $(CFLAGS) -o bin/ccehCoW src/test.cpp src/CCEH_CoW.o -lpmemobj -lpmem -lpthread -DMULTITHREAD
+
+# CCEH: src/CCEH.h src/CCEH.cpp
+# 	$(CXX) $(CFLAGS) -c -o src/CCEH.o src/CCEH.cpp -DINPLACE -lpmemobj -lpmem
+# 	$(CXX) $(CFLAGS) -c -o src/CCEH_CoW.o src/CCEH.cpp -lpmemobj -lpmem
+
+# clean:
+# 	rm -rf src/*.o bin/*
+
 .PHONY: all clean
 
-CXX := g++ -O3 -std=c++17
-CFLAGS := -I./ -lrt
+#################################
+# Enable pmrace by default
+CXX = clang++
+ENABLE_PMRACE = 1
+#################################
+
+INSTRUMENT_PASS_DIR = $(PMRACE_DIR)/instrument
+
+PMRACEPASS_FLAGS = -stdlib=libc++ -mclflushopt -mclwb -Xclang -load -Xclang $(INSTRUMENT_PASS_DIR)/libPMRacePass.so -fsanitize=dataflow -mllvm -dfsan-abilist=$(INSTRUMENT_PASS_DIR)/pmrace-ABI.txt
+RACE_OUTPUT_FLAGS = -mllvm -coverage-path -mllvm output/cov -mllvm -race-path -mllvm output/race.csv -mllvm -unflushed-path -mllvm output/unflushed.csv -mllvm -meta-path -mllvm $@.json
+RACE_PMDK_MODE_FLAGS = -mllvm -pmrace-mode -mllvm pmdk
+PMRACEHOOK_LD_FLAGS = -L$(INSTRUMENT_PASS_DIR) -Wl,-rpath='$(INSTRUMENT_PASS_DIR)' -lPMRaceHook -fsanitize=dataflow -stdlib=libc++
+
+PMDK_DIR = $(PMRACE_DIR)/deps/pmdk
+PMDK_INSTALL_DIR = $(PMDK_DIR)/install
+PMDK_FLAGS = -I$(PMDK_INSTALL_DIR)/include
+PMDK_LD_FLAGS = -L$(PMDK_INSTALL_DIR)/lib/pmdk_debug -Wl,-rpath='$(PMDK_INSTALL_DIR)/lib/pmdk_debug' -lpmem -lpmemobj
+
+DEBUGFLAGS = -g -O0
+
+ifeq ($(ENABLE_PMRACE),1)
+	CFLAGS += $(PMRACEPASS_FLAGS) $(RACE_OUTPUT_FLAGS) $(RACE_PMDK_MODE_FLAGS) $(PMDK_FLAGS) $(DEBUGFLAGS) -DPMRACE_ENABLED -I$(LLVM_DIR)/include/c++/v1
+	LDFLAGS += $(PMRACEHOOK_LD_FLAGS) $(PMDK_LD_FLAGS) -L$(LLVM_DIR)/lib
+else
+	CXX := /home/user/ck/AFLplusplus/afl-clang-fast++ -O3 -std=c++17
+	CFLAGS += -I./ -lrt
+	LDFLAGS += -lpmem -lpmemobj
+endif
+
+# CXX := g++ -O3 -std=c++17
+CFLAGS += -I./ -lrt -std=c++17
+
+all: cceh ccehCoW
+
+cceh: test.o CCEH.o
+	mkdir -p bin
+	$(CXX) -o bin/$@ $^ $(LDFLAGS) -lpthread
+
+ccehCoW: test.o CCEH_CoW.o
+	mkdir -p bin
+	$(CXX) -o bin/$@ $^ $(LDFLAGS) -lpthread
+
+test.o: src/test.cpp
+	$(CXX) $(CFLAGS) -c -o $@ src/test.cpp -DMULTITHREAD
 
-all: test
+CCEH.o: src/CCEH.h src/CCEH.cpp
+	$(CXX) $(CFLAGS) -c -o $@ src/CCEH.cpp -DINPLACE
 
-test: src/test.cpp CCEH
-	$(CXX) $(CFLAGS) -o bin/single_threaded_cceh src/test.cpp src/CCEH.o -lpmemobj -lpmem
-	$(CXX) $(CFLAGS) -o bin/multi_threaded_cceh src/test.cpp src/CCEH.o -lpmemobj -lpmem -lpthread -DMULTITHREAD
-	$(CXX) $(CFLAGS) -o bin/single_threaded_ccehCoW src/test.cpp src/CCEH_CoW.o -lpmemobj -lpmem
-	$(CXX) $(CFLAGS) -o bin/multi_threaded_ccehCoW src/test.cpp src/CCEH_CoW.o -lpmemobj -lpmem -lpthread -DMULTITHREAD
+CCEH_CoW.o: src/CCEH.h src/CCEH.cpp
+	$(CXX) $(CFLAGS) -c -o $@ src/CCEH.cpp
 
-CCEH: src/CCEH.h src/CCEH.cpp
-	$(CXX) $(CFLAGS) -c -o src/CCEH.o src/CCEH.cpp -DINPLACE -lpmemobj -lpmem
-	$(CXX) $(CFLAGS) -c -o src/CCEH_CoW.o src/CCEH.cpp -lpmemobj -lpmem
-	
 clean:
-	rm -rf src/*.o bin/* 
+	rm -rf src/*.o bin/* *.o *.json pmem_pool*
diff --git a/CCEH-PMDK/src/CCEH.h b/CCEH-PMDK/src/CCEH.h
index d4fa713..467ac70 100644
--- a/CCEH-PMDK/src/CCEH.h
+++ b/CCEH-PMDK/src/CCEH.h
@@ -12,6 +12,8 @@
 
 #define TOID_ARRAY(x) TOID(x)
 
+#define pm_sync_var_hint(size, init_val) __attribute__((__annotate__("sync-" #size "-" #init_val)))
+
 typedef size_t Key_t;
 typedef const char* Value_t;
 
@@ -106,7 +108,7 @@ struct Segment{
     size_t numElement(void);
 
     Pair bucket[kNumSlot];
-    int64_t sema = 0;
+    int64_t sema pm_sync_var_hint(8, 0);
     size_t local_depth;
     
 };
@@ -115,7 +117,7 @@ struct Directory{
     static const size_t kDefaultDepth = 10;
 
     TOID_ARRAY(TOID(struct Segment)) segment;	
-    int64_t sema = 0;
+    int64_t sema pm_sync_var_hint(8, 0);
     size_t capacity;		
     size_t depth;	
 
diff --git a/CCEH-PMDK/src/hash.h b/CCEH-PMDK/src/hash.h
index e186283..2483dd9 100644
--- a/CCEH-PMDK/src/hash.h
+++ b/CCEH-PMDK/src/hash.h
@@ -6,7 +6,9 @@
 
 inline size_t standard(const void* _ptr, size_t _len,
     size_t _seed=static_cast<size_t>(0xc70f6907UL)){
-  return std::_Hash_bytes(_ptr, _len, _seed);
+    // change the gcc built-in implementation to general 'hash'
+    // return std::_Hash_bytes(_ptr, _len, _seed);
+    return std::hash<std::string>{}(std::string(static_cast<const char*>(_ptr), _len));
 }
 
 // JENKINS HASH FUNCTION
@@ -62,14 +64,14 @@ inline size_t murmur2 ( const void * key, size_t len, size_t seed=0xc70f6907UL)
 		k *= m;
 		k ^= k >> r;
 		k *= m;
-		
+
 		h *= m;
 		h ^= k;
 
 		data += 4;
 		len -= 4;
 	}
-	
+
 	// Handle the last few bytes of the input array
 
 	switch(len)
diff --git a/CCEH-PMDK/src/test.cpp b/CCEH-PMDK/src/test.cpp
index 2d7b25c..b789e49 100644
--- a/CCEH-PMDK/src/test.cpp
+++ b/CCEH-PMDK/src/test.cpp
@@ -1,200 +1,166 @@
+#include <unistd.h>
+
+#include <algorithm>
+#include <atomic>
+#include <bitset>
 #include <cstdio>
-#include <ctime>
 #include <cstdlib>
-#include <unistd.h>
-#include <iostream>
+#include <ctime>
 #include <fstream>
-#include <algorithm>
+#include <iostream>
+#include <sstream>
 #include <thread>
 #include <vector>
-#include <bitset>
 
 #include "src/CCEH.h"
 using namespace std;
 
-
-#define POOL_SIZE (10737418240) // 10GB
+#define POOL_SIZE (32 * 1024 * 1024UL)
 
 void clear_cache() {
-    int* dummy = new int[1024*1024*256];
-    for (int i=0; i<1024*1024*256; i++) {
-	dummy[i] = i;
-    }
+  int* dummy = new int[1024 * 1024 * 256];
+  for (int i = 0; i < 1024 * 1024 * 256; i++) {
+    dummy[i] = i;
+  }
 
-    for (int i=100;i<1024*1024*256;i++) {
-	dummy[i] = dummy[i-rand()%100] + dummy[i+rand()%100];
-    }
+  for (int i = 100; i < 1024 * 1024 * 256; i++) {
+    dummy[i] = dummy[i - rand() % 100] + dummy[i + rand() % 100];
+  }
 
-    delete[] dummy;
+  delete[] dummy;
 }
 
-
-int main (int argc, char* argv[])
-{
-    if(argc < 3){
-	cerr << "Usage: " << argv[0] << "path numData" << endl;
-	exit(1);
-    }
-    const size_t initialSize = 1024*16;
-    char path[32];
-    strcpy(path, argv[1]);
-    int numData = atoi(argv[2]);
-#ifdef MULTITHREAD
-    int numThreads = atoi(argv[3]);
+#ifndef __AFL_FUZZ_TESTCASE_LEN
+  ssize_t fuzz_len;
+  #define __AFL_FUZZ_TESTCASE_LEN fuzz_len
+  unsigned char fuzz_buf[1024000];
+  #define __AFL_FUZZ_TESTCASE_BUF fuzz_buf
+  #define __AFL_FUZZ_INIT() void sync(void);
+  #define __AFL_LOOP(x) ((fuzz_len = read(0, fuzz_buf, sizeof(fuzz_buf))) > 0 ? 1 : 0)
+  #define __AFL_INIT() sync()
 #endif
-    struct timespec start, end;
-    uint64_t elapsed;
-    PMEMobjpool* pop;
-    bool exists = false;
-    TOID(CCEH) HashTable = OID_NULL;
-
-    if(access(path, 0) != 0){
-	pop = pmemobj_create(path, "CCEH", POOL_SIZE, 0666);
-	if(!pop){
-	    perror("pmemoj_create");
-	    exit(1);
-	}
-	HashTable = POBJ_ROOT(pop, CCEH);
-	D_RW(HashTable)->initCCEH(pop, initialSize);
-    }
-    else{
-	pop = pmemobj_open(path, "CCEH");
-	if(pop == NULL){
-	    perror("pmemobj_open");
-	    exit(1);
-	}
-	HashTable = POBJ_ROOT(pop, CCEH);
-	if(D_RO(HashTable)->crashed){
-	    D_RW(HashTable)->Recovery(pop);
-	}
-	exists = true;
-    }
 
-#ifdef MULTITHREAD
-    cout << "Params: numData(" << numData << "), numThreads(" << numThreads << ")" << endl;
-#else
-    cout << "Params: numData(" << numData << ")" << endl;
+__AFL_FUZZ_INIT();
+
+int main(int argc, char* argv[]) {
+  if (argc < 3) {
+    cerr << "Usage: " << argv[0] << "path numThread" << endl;
+    exit(1);
+  }
+  const size_t initialSize = 1024;
+  char path[64];
+  strcpy(path, argv[1]);
+  int numThreads = atoi(argv[2]);
+  PMEMobjpool* pop;
+  bool exists = false;
+  TOID(CCEH) HashTable = OID_NULL;
+
+#ifndef PMRACE_ENABLED
+  remove(path);
 #endif
-    uint64_t* keys = new uint64_t[numData];
-
-    ifstream ifs;
-    string dataset = "/home/chahg0129/dataset/input_rand.txt";
-    ifs.open(dataset);
-    if (!ifs){
-	cerr << "No file." << endl;
-	exit(1);
+
+  if (access(path, 0) != 0) {
+    pop = pmemobj_create(path, "CCEH", POOL_SIZE, 0666);
+    if (!pop) {
+      perror("pmemoj_create");
+      abort();
     }
-    else{
-	for(int i=0; i<numData; i++)
-	    ifs >> keys[i];
-	ifs.close();
-	cout << dataset << " is used." << endl;
+    HashTable = POBJ_ROOT(pop, CCEH);
+    D_RW(HashTable)->initCCEH(pop, initialSize);
+  } else {
+    pop = pmemobj_open(path, "CCEH");
+    if (pop == NULL) {
+      perror("pmemobj_open");
+      abort();
     }
-#ifndef MULTITHREAD // single-threaded
-    if(!exists){
-	{ // INSERT
-	    cout << "Start Insertion" << endl;
-	    clear_cache();
-	    clock_gettime(CLOCK_MONOTONIC, &start);
-	    for(int i=0; i<numData; i++){
-		D_RW(HashTable)->Insert(pop, keys[i], reinterpret_cast<Value_t>(keys[i]));
-	    }
-	    clock_gettime(CLOCK_MONOTONIC, &end);
-
-	    elapsed = (end.tv_sec - start.tv_sec)*1000000000 + (end.tv_nsec - start.tv_nsec);
-	    cout << elapsed/1000 << "\tusec\t" << (uint64_t)(1000000*(numData/(elapsed/1000.0))) << "\tOps/sec\tInsertion" << endl;
-	}
+    HashTable = POBJ_ROOT(pop, CCEH);
+    if (D_RO(HashTable)->crashed) {
+      D_RW(HashTable)->Recovery(pop);
     }
+    exists = true;
+  }
+
+#ifndef PMRACE_ENABLED
+  void* bak = malloc(POOL_SIZE);
+  memcpy(bak, pop, POOL_SIZE);
+#endif
+
+  cerr << "numThreads(" << numThreads << ")" << endl;
+
+  __AFL_INIT();
+
+  unsigned char* afl_testcase_buf = __AFL_FUZZ_TESTCASE_BUF;
+
+  while (__AFL_LOOP(100)) {
+    int len = __AFL_FUZZ_TESTCASE_LEN;
 
-    { // SEARCH
-	cout << "Start Searching" << endl;
-	clear_cache();
-	int failedSearch = 0;
-	clock_gettime(CLOCK_MONOTONIC, &start);
-	for(int i=0; i<numData; i++){
-	    auto ret = D_RW(HashTable)->Get(keys[i]);
-	    if(ret != reinterpret_cast<Value_t>(keys[i])){
-		failedSearch++;
-	    }
-	}
-	clock_gettime(CLOCK_MONOTONIC, &end);
-	elapsed = (end.tv_sec - start.tv_sec)*1000000000 + (end.tv_nsec - start.tv_nsec);
-	cout << elapsed/1000 << "\tusec\t" << (uint64_t)(1000000*(numData/(elapsed/1000.0))) << "\tOps/sec\tSearch" << endl;
-	cout << "Failed Search: " << failedSearch << endl;
+    vector<thread> thread_groups;
+    vector<istringstream> cmd_streams;
+    std::atomic<int> next_thread_id;
+    char* tok;
+    int i;
+
+    next_thread_id.store(0);
+
+#ifndef PMRACE_ENABLED
+    memcpy(pop, bak, POOL_SIZE);
+#endif
+
+    for (i = 0; i < numThreads; ++i) {
+      if (i == 0) {
+        tok = strtok((char*)afl_testcase_buf, "\t");
+      } else {
+        tok = strtok(NULL, "\t");
+      }
+
+      if (tok == NULL) {
+        cmd_streams.emplace_back(string());
+      } else {
+        cmd_streams.emplace_back(tok);
+      }
     }
 
-#else // multi-threaded
-    vector<thread> insertingThreads;
-    vector<thread> searchingThreads;
-    int chunk_size = numData/numThreads;
-
-    if(!exists){
-	{ // INSERT
-	    auto insert = [&pop, &HashTable, &keys](int from, int to){
-		for(int i=from; i<to; i++){
-		    D_RW(HashTable)->Insert(pop, keys[i], reinterpret_cast<Value_t>(keys[i]));
-		}
-	    };
-
-	    cout << "Start Insertion" << endl;
-	    clear_cache();
-	    clock_gettime(CLOCK_MONOTONIC, &start);
-	    for(int i=0; i<numThreads; i++){
-		if(i != numThreads-1)
-		    insertingThreads.emplace_back(thread(insert, chunk_size*i, chunk_size*(i+1)));
-		else
-		    insertingThreads.emplace_back(thread(insert, chunk_size*i, numData));
-	    }
-
-	    for(auto& t: insertingThreads) t.join();
-	    clock_gettime(CLOCK_MONOTONIC, &end);
-
-	    elapsed = (end.tv_sec - start.tv_sec)*1000000000 + (end.tv_nsec - start.tv_nsec);
-	    cout << elapsed/1000 << "\tusec\t" << (uint64_t)(1000000*(numData/(elapsed/1000.0))) << "\tOps/sec\tInsertion" << endl;
-	}
+    auto func = [&]() {
+      int thread_id = next_thread_id.fetch_add(1);
+      char op;
+      Key_t k;
+      string v;
+      auto& cmd_stream = cmd_streams[thread_id];
+
+      while (cmd_stream >> op) {
+        if (op == 'i') {
+          cmd_stream >> hex >> k >> v;
+          D_RW(HashTable)->Insert(pop, k, v.c_str());
+        } else if (op == 'g') {
+          cmd_stream >> hex >> k;
+          D_RW(HashTable)->Get(k);
+        } else if (op == 'u') {
+          D_RW(HashTable)->Utilization();
+        } else if (op == 'c') {
+          D_RW(HashTable)->Capacity();
+        } else {
+          std::cerr << "Unsupported cmd\n";
+          abort();
+        }
+      }
+    };
+
+    for (i = 0; i < numThreads; ++i) {
+      thread_groups.push_back(thread{func});
     }
 
-    { // SEARCH
-	int failedSearch = 0;
-	vector<int> searchFailed(numThreads);
-
-	auto search = [&pop, &HashTable, &keys, &searchFailed](int from, int to, int tid){
-	    int fail_cnt = 0;
-	    for(int i=from; i<to; i++){
-		auto ret = D_RW(HashTable)->Get(keys[i]);
-		if(ret != reinterpret_cast<Value_t>(keys[i])){
-		    fail_cnt++;
-		}
-	    }
-	    searchFailed[tid] = fail_cnt;
-	};
-
-	cout << "Start Search" << endl;
-	clear_cache();
-	clock_gettime(CLOCK_MONOTONIC, &start);
-	for(int i=0; i<numThreads; i++){
-	    if(i != numThreads-1)
-		searchingThreads.emplace_back(thread(search, chunk_size*i, chunk_size*(i+1), i));
-	    else
-		searchingThreads.emplace_back(thread(search, chunk_size*i, numData, i));
-	}
-
-	for(auto& t: searchingThreads) t.join();
-	clock_gettime(CLOCK_MONOTONIC, &end);
-
-	elapsed = (end.tv_sec - start.tv_sec)*1000000000 + (end.tv_nsec - start.tv_nsec);
-	cout << elapsed/1000 << "\tusec\t" << (uint64_t)(1000000*(numData/(elapsed/1000.0))) << "\tOps/sec\tSearch" << endl;
-
-	for(auto& v: searchFailed) failedSearch += v;
-	cout << "Search Failed: " << failedSearch << endl;
+    for (i = 0; i < numThreads; ++i) {
+      thread_groups[i].join();
     }
-#endif
+  }
+
+  D_RW(HashTable)->crashed = false;
+  pmemobj_persist(pop, (char*)&D_RO(HashTable)->crashed, sizeof(bool));
+  pmemobj_close(pop);
 
-    auto util = D_RW(HashTable)->Utilization();
-    cout << "Utilization: " << util << " %" << endl;
+#ifndef PMRACE_ENABLED
+  free(bak);
+#endif
 
-    D_RW(HashTable)->crashed = false;
-    pmemobj_persist(pop, (char*)&D_RO(HashTable)->crashed, sizeof(bool));
-    pmemobj_close(pop);
-    return 0;
-} 
+  return 0;
+}
